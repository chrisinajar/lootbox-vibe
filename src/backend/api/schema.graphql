scalar BigInt

enum Rarity { COMMON UNCOMMON RARE EPIC LEGENDARY MYTHIC }

type CountByRarity { rarity: Rarity!, count: BigInt! }
type CountByType   { typeId: ID!, count: BigInt! }
type CountBySource { sourceBoxId: ID!, count: BigInt! }

type InventorySummary {
  totalStacks: Int!
  totalItems: BigInt!
  byRarity: [CountByRarity!]!
  byType: [CountByType!]!
  bySource: [CountBySource!]!
}

type Query {
  inventorySummary: InventorySummary!
  inventoryList(filter: InventoryFilter, limit: Int = 100, cursor: ID): PageItemStacks!
  configHash: String!
}

input OpenBoxesInput { boxId: ID!, count: Int!, requestId: ID! }

type RewardStack { stackId: ID!, typeId: ID!, rarity: Rarity!, count: Int! }
type RewardCurrency { currency: ID!, amount: BigInt! }
type Rewards { stacks: [RewardStack!]!, currencies: [RewardCurrency!]!, unlocks: [ID!]! }

type Mutation { openBoxes(input: OpenBoxesInput!): Rewards! }

input SalvageInput { maxRarity: Rarity!, typeIds: [ID!], staticModIds: [ID!] }
type SalvageResult { scrapped: [RewardStack!]!, currencies: [RewardCurrency!]! }

extend type Mutation { salvage(input: SalvageInput!): SalvageResult! }

# Idle claim
input ClaimIdleInput { noop: Boolean }
type IdleReport { message: String!, boxesOpened: Int!, rewards: Rewards! }
extend type Mutation { claimIdle(input: ClaimIdleInput): IdleReport! }

# Inventory list types
input InventoryFilter { rarity: Rarity, typeId: ID, sourceBoxId: ID, curatedTags: [ID!] }
type ItemStack { stackId: ID!, typeId: ID!, rarity: Rarity!, count: Int! }
type PageItemStacks { rows: [ItemStack!]!, nextCursor: ID }
